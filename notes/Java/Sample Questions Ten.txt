Question (from Sample Questions Four):
What will the following program print when run using the command line: java TestClass   
public class TestClass {     
	public static void methodX() throws Exception {       
		throw new AssertionError();    
	}       
	public static void main(String[] args) {       
		try{          
			methodX();       
		} catch (Exception e) {         
			System.out.println("EXCEPTION");       
		}    
	} 
}
1. It will print EXCEPTION.
2. It will throw AssertionError out of the main method.
3. It will not compile because of the throws clause in methodX().
4. It will end without printing anything because assertions are disabled by default.

Answer:
1. The catch block will not be able to catch the Error thrown by methodX().
2. A subclass of Error cannot be caught using a catch block for Exception because java.lang.Error does not extend java.lang.Exception. 
3. The throws clause is valid even though unnecessary in this case.
4. It is true that assertions are disabled by default however, methodX is throwing an AssertionError explicitly like any other Throwable. Here, the assertion mechanism is not even used.
Correct response: 2.

Question (from sample questions four):  Will the following code compile and run?
static import java.lang.System.*;//1
class $$//2
{
	static public void main(String... _$_) //3
	{
		String _ = ""; //4
		for(int $=0; ++$ < _$_.length; ) //5
			_ += _$_[$]; //6
		out.println(_); //7
	}
}

Answer:
Everything here is valid, except the import statement, which should be import static ...
Reverse these two words and everything will compile fine.
Correct response: no.

Question:
Given the following code:
class TestClass{
   public static void main(String args[]){
      int k = 0;
      int m = 0;
      for (int i = 0; i <= 3; i++){
         k++;
         if ( i == 2){
            // line 1
         }
         m++;
      }
      System.out.println( k + ", " + m );
   }
}
What is the output if line 1 is replaces by:
1. break;
2. continue
3. i = m ++;
4. i = 4;

Answer:
This is a simple loop. All you need to do is execute each statement in your head. For example, if line 1 is replaced by break:  
1. k=0, m=0 2. 
iteration 1: i=0     
2.1 k = 1     
2.2 i == 2 is false     
2.3 m = 1 3. 
iteration 2: i = 1     
3.1 k=2     
3.2 i==2 is false     
3.3 m = 2 4. 
iteration 3: i = 2     
4.1 k=3     
4.2 i==2 is true     
4.3 break 5. 
print 3, 2
Correct answers:
1. 3, 2
2. 4, 3
3. 4, 5
4. 3, 3
(From Sample Questions Four)

Question:
Consider the following code in TestClass.java file:
package p;
private class TC extends java.util.HashMap{
   public TC(){
      super(100);
      System.out.println("TC created");
   }
}
public class TestClass extends TC{
   public TestClass(){
      System.out.println("TestClass created");
   }
   public static void main(String[] args){ new TestClass(); }
}
What will be the output when TestClass is run?

Answer:
The correct answer is that the code will not compile because TC is a top level class and private is not a valid access modifier for a top level class. private can be applied to an inner class.
Error: modifier private not allowed here.
(Four)

Question:
Which of the given lines can be inserted at //1 of the following program ?  
public class TestClass{        
	public static void main(String[] args){      
		short s = 9;      //1    
	} 
}
1. int i = 9; System.out.println(s == i);
2. Boolean b = s instanceof Number;
3. Short k = 9; Integer i = 9; System.out.println(k == i);
4. Integer i = 9; System.out.println( s == i );
5. System.out.println(s instanceof Short);
6. Short k = new Short(9); System.out.println(k instanceof Short);

Answer:
1. Any two integral primitives can be compared using == operator.
2. Left operand of instanceof MUST be an object and not a primitive.
3. This will not compile because k and i are referring to objects that have no IS-A relationship among themselves.
5. The left operand of instanceof MUST be an object and not a primitive.
6. 9 is considered an int. This should be: Short s = new Short( (short) 9 );
Correct response: 1 & 4
(4)

Question:
Consider the following lines of code:  
Integer i = new Integer(42); 
Long ln = new Long(42); 
Double d = new Double(42.0);
System.out.println(ln.equals(42));
What will be the output?

Answer:
The concept to understand here is as follows -
If the compiler can figure out that something can NEVER happen, then it flags an error. In this question, the compiler knows that ln, i or d can never point to the same object in any case because they are references to different classes of objects that have no relation ( superclass/subclass ) between themselves.
Therefore 1 and 2 will fail at compile time.
5. Due to auto-boxing int 42 is converted into an Integer object containing 42. So this is valid. It will return false though because ln is a Long and 42 is boxed into an Integer.
Correct response: false
(fOUR)

Question:
Given the following LOCs:     
int rate = 10;    
XXX amount = 1 - rate/100*1 - rate/100;  
What can XXX be?

Answer:
Note that none of the terms in the expression 1 - rate/100*1 - rate/100; is double or float. They are all ints. So the result of the expression will be an int. Since an int can be assigned to a variable of type int, long, float or double, amount cAn integer can be assigned to a double but not vice versa.

Object class's equals() method just checks whether the two references are pointing to the same location or not.

When refactoring a class to make it better in terms of encapsulation, the key is that your data variable should be private and the functionality that is to be exposed outside should be public. Further, your setter methods should be coded such that they don't leave the data members inconsistent with each other.
an be int, long, float or double.
Correct response: int, long, float or double

An integer can be assigned to a double but not vice versa.
A byte can ALWAYS be assigned to an int.
a short or byte cannot be assigned to each other unless they are cast:
		short s = 10;
		char c = s; // error
		s = c;      // error
final short s = 1; byte b = s; => This is fine because s is a constant and the value fits into a byte.
Implicit narrowing occurs only for byte, char, short, and int. Remember that it does not occur for long, float, or double. So, this will not compile: int i = 129L;

Object class's equals() method just checks whether the two references are pointing to the same location or not.

When refactoring a class to make it better in terms of encapsulation, the key is that your data variable should be private and the functionality that is to be exposed outside should be public. Further, your setter methods should be coded such that they don't leave the data members inconsistent with each other.

Question:
Which lines commented our will allow this program to compile?
interface A {
	double aMethod(int a);
}
interface B {
	double bMethod(int a, int b);
}

1. class X extendes A { double aMethod(int a);}
2. interface Y implements B { double bMethod(int x, int y);}
3. interface Z extends A { float cMethod(int a, int b);}
4. class P implements B { double aMethod(int a);}
5. abstract class Q implements A, B {
	public double aMethod(int a) {return a * a * 5.16;}
}

Answer:
Correct response: 1  2.
(from Sample Questions Five)


Question:
Cosnider these two classes: Parent.java and Child.java
package p1;
public class Parent {
	public int x = new Interger(100);
	protected int parentMethod() {
		return x;
	}
}
package p2;
import p1.Parent;
public class Child extends Parent {
	public static void main(String [] args) {
		new Child().childMethod();
	}
	void childMethod() {
		System.out.print("This "+this.parentMethod());
		Parent p = new Parent();
		System.out.prin(" parent "+p.parentMethod());
	}
}
What line can be removed to make the program compile and run?

Answer: If line 10 is removed, then the output for the program when run is: This 100
If you recall, a protected method can be called from a child class, as in line 8, but not from the parent class itself.
Correct response: System.out.prin(" parent "+p.parentMethod());
Category: Creating and Using Arrays?
Cinsider that p.parentMethod is trying to use a method thru parent, while this.parentMethod is accessing the method as the part of itself which extends parent.
What's a good family metaphore for this?  Family is allowed to access private methods.  Family being by inheritance.

<<<<<<< HEAD
Question 85:
Given the following definitions and reference declarations:

interface I1 { }
interface I2 { }
class C1 implements I1 { }
class C2 implements I2 { }
class C3 extends C1 implements I2 { }
C1 o1;
C2 o2;
C3 o3;
Which of these statements are legal?
1. class C4 extends C3 implements I1, I2 { }
2. o3 = o1;
3. o3 = o2;
4. I1 i1 = o3; I2 i2 = (I2) i1;
5. I1 b = o3;

Answer:
1. Although, the implements I1, I2 is redundant here because C3 already implements I1 and I2, it is not invalid.
2. superclass reference cannot be assigned to subclass reference without explicit cast.
3. There is no way a reference of class C2 (which is o2) can point to an object of class C3 because C2 and C3 have no inheritance relationship. So this assignment is rejected at compile time itself.
4. This is valid because at run time i1 actually refers to an object that implements I2.
5. Because C3 extends C1 which implements I1.
Correct response: 1, 4, 5.
Category: Working with Inheritance: Easy
(From Seven)

Question 86:
Consider the following code:

class A{
   A() {  print();   }
   void print() { System.out.println("A"); }
}
class B extends A{
   int i =   Math.round(3.5f);
   public static void main(String[] args){
      A a = new B();
      a.print();
   }
   void print() { System.out.println(i); }
}
What will be the output when class B is run ?

Answer:
Explanation:
Note that method print() is overridden in class B. Due to polymorphism, the method to be executed is selected depending on the class of the actual object. Here, when an object of class B is created, first A's constructor is called, which in turn calls print(). Now, since the class of actual object is B, B's print() is selected. At this point of time, variable i has not been initialized (because we are still initializing A at this point), so its default value i.e. 0 is printed. This happens because the method print() is non-private, hence polymorphic.  Finally, 4 is printed.
Correct response: It will print 0, 4
Category: Working with Inheritance: Real Brainer.
(Seven)


Question: 
Will the folliwng code print?
public class BreakTest{
  public static void main(String[] args){
    int i = 0, j = 10;
    lab1 : for( ; ; i++){
      for( ; ; --j)  if( i >j ) break lab1;
    }
    System.out.println(" i = "+i+", j = "+j);
  }
}

Answer:
Correct response: i = 0 j = -1.


Question:
Consider that str is a variable of class java.lang.String. Which of the following lines of code may throw a NullPointerException in certain situations?  Or a tougher version of the question could be : Which of the following lines of code are not an example of robust design ?
1. if ( (str != null) | ( i == str.length() ) ) 
2. if ( (str == null) | ( i == str.length() ) ) 
3. if ( (str != null) || (i == str.length() ) )
4. if ( (str == null) || (i == str.length() ) )

Answer:
(See TestClass22)
1. (i == str.length()) will always be executed so if 'str' is null, then str.length() will throw a NullPointerException.
2. (i == str.length()) will always be executed so if 'str' is null, then str.length() will throw a NullPointerException.
3. (i == str.length()) will only be evaluated if (str != null) is false, and (str != null) will be false if 'str' is null. So it will also throw a NullPointerException.
4. (i == str.length()) will only be evaluated if (str == null) is false, and (str == null) will be false if 'str' is NOT null. So it will NEVER throw a NullPointerException.
The correct answers are 1,2 and 3.
(From Sample Questions Three)

Questions:
Consider the following method:
	private static void testSampleQuestionsThree()
	{
		System.out.println('b' + new Integer(10)); // 1
		String a = 'b' + new Integer(10);		   // 2
		String s = 66 + new Integer(10);		   // 3
		System.out.println(a+" "+s);			   // 4
	}
What will be the output when compiled and run?

Answer:
There will be two compile tile errors:
At line 2 and 3: incpmpatible types
required: String
found: int
For line 1: Since the first operand of + one is of numeric type, its numberic value of 98 will be used.  Integer 10 will be unboxed and added to 98.  Therefore, the final value will be int 108.
For line 2: Since we are assinging an int to a String, we will get an error on the same code in line 1 used outside a println statement.  If both String variables are changed to int or Integer, then the output would be 108, 108 76.

Question:
Consider the following code...  
class MyException extends Exception {}  
public class TestClass{      
	public void myMethod() throws XXXX{          
		throw new MyException();      
	} 
}  
What can replace XXXX?
A. MyException
B. Exception
C. Throwable
D. RuntimeException

Answer:
B. Because Exception is a superclass of MyException.
A throws clause is necessary because MyException is a checked exception. Any exception that extends java.lang.Exception but is not a subclass of java.lang.RuntimeException is a checked exception.
C. Because Throwable is a super class of Exception.
Why: You can use Throwable as well as Exception as both of them are super classes of MyException. RuntimeException (and its subclasses such as NullPointerException and ArrayIndexOutOfBoundsException) is not a checked exception. So it cannot cover for MyException which is a checked exception. You cannot use Error as well because it is not in the hierarchy of MyException, which is: 
Object <- Throwable <- Exception <- MyException.
Correct Answer: A, B, C but not D.
(From Sample Questions Three)

Question:
Given:
	StringBuilder b1 = new StringBuilder("snorkler");
	StringBuilder b1 = new StringBuilder("yoodler");
	b1.replace(3,4,b2.substring(4)).append(b2.append(false));

Answer:
- You need to understand how append, insert, delete, and substring methods of StringBuilder/StringBuffer work. Please go through JavaDoc API for these methods. This is very important for the exam. Observe that substring() does not modify the object it is invoked on but append, insert and delete do.
- In the exam, you will find questions that use such quirky syntax, where multiple calls are chained together. For example: 
sb.append("a").append("asdf").insert(2, "asdf"). 
- Make yourself familiar with this technique. If in doubt, just break it down into multiple calls. For example, the aforementioned statement can be thought of as:  
sb.append("a"); 
sb.append("asdf"); 
sb.insert(2, "asdf")  
- Note that the method substring() in StringBuilder/StringBuffer returns a String (and not a reference to itself, unlike append, insert, and delete). So another StringBuilder method cannot be chained to it. For example, the following is not valid: 
sb.append("a").substring(0, 4).insert(2, "asdf");  
The error would be: cannot find symbol: method inster(int,String) location: class String.
- The following is valid though:  
String str = sb.append("a").insert(2, "asdf").substring(0, 4);
Also note that the substring(int i) method includes all from i to the end of the string.  In this case that is "ler", not just "l".
Correct response: snorlerkleryoodlerfalse
(From Three)

Question:
Consider the following method...  
public int setVar(int a, int b, float c) { ...}  
Which of the following methods correctly overload the above method?
A. public int setVar(int a, float b, int c){   return (int)(a + b + c); }
B. public int setVar(int a, float b, int c){   return this(a, c, b); }
C. public float setVar(int a){   return a; }

Answer:
B. this( ... ) can only be called in a constructor and that too as a first statement.
method is said to be overloaded when the other method's name is same and parameters ( either the number or their order) are different. Option 2 is not valid Because of the line: return this(a, c, b); This is the syntax of calling a constructor and not a method. It should have been: return this.setVar(a, c, b);

Question:
What will the following program print? 
class LoopTest{
    public static void main(String args[]) {
        int counter = 0;
        outer:
        for (int i = 0; i < 3; i++) {
            middle:
            for (int j = 0; j < 3; j++) {
                inner:
                for (int k = 0; k < 3; k++) {
                    if (k - j > 0) {
                        break middle;
                    }
                    counter++;
                }
            }
        }
        System.out.println(counter);
    }
}

Answer:
To understand how this loop works let us put some extra print statements in the innermost loop:
System.out.println("i="+i+" j="+j+" k="+k);
if(k-j>0){
     System.out.println("breaking middle "+j);
     break middle;
}
counter++;
This is what it prints:
i=0 j=0 k=0
i=0 j=0 k=1
breaking middle 0
i=1 j=0 k=0
i=1 j=0 k=1
breaking middle 0
i=2 j=0 k=0
i=2 j=0 k=1
breaking middle 0
3
The key is that the middle loop is broken as soon as k-j becomes > 0. This happens on every second iteration of inner loop when k is 1 and j is 0. Now, when middle is broken inner cannot continue. So the next iteration of outer starts.
(From Three)

Question: Which of the following statements are correct?
1. An interface can be extended by an abstract class.
2. An interface can be extended by a concrete class.
3. An abstract class cannot implement an interface.
Answer:
1. A class "implements" an interface. It does not "extend" an interface.
3. Any class, whether abstract or concrete, can implement any interface.
Correct response: 1, 2, and 3 are all wrong.
(From Four)

Question:
Give the following classes:

package seven.one.initialization;
import org.apache.log4j.Logger;
class SuperSuper
{
	static Logger log = Logger.getLogger(SuperSuper.class);
	
	SuperSuper(){log.info("S: super super constructor");}
}

package seven.one.initialization;
import org.apache.log4j.Logger;
class SuperSequence extends SuperSuper
{
	static Logger log = Logger.getLogger(SuperSequence.class);
	
	SuperSequence(){log.info("s: super constructor");}
}

package seven.one.initialization;
import org.apache.log4j.Logger;
public class Sequence extends SuperSequence
{ 
	static Logger log = Logger.getLogger(Sequence.class);
	Sequence() {log.info("c: constructor"); } 
	{log.info("y: normal init block"); } 
	public static void main(String[] args) 
	{ 
		log.info("1st Object -------");
		new Sequence().go(); 
		log.info("2nd Object -------");
		Sequence s = new Sequence();
		s.go();
	} 
	void go() {log.info("g: go method"); } 
	static {log.info("w: static init block"); } 
	{log.info("z: normal init block"); } 
	static {log.info("x: static init block"); } 
} 

And the following test:

	public void testSequence()
    {
        log.info("");
        log.info(this.getClass().getSimpleName());
        log.info("1st Object -------");
        new Sequence().go(); 
        log.info("2nd Object -------");
        Sequence s = new Sequence();
        s.go();
        String expected = "value";
        String actual = "value";
        assertEquals(expected,actual);
    }

What will be the output?

Answer:
Correct response:
InitializationTest
1st Object -------
w: static init block
x: static init block
S: super super constructor
s: super constructor
y: normal init block
z: normal init block
c: constructor
g: go method
2nd Object -------
S: super super constructor
s: super constructor
y: normal init block
z: normal init block
c: constructor
g: go method

Question:
	private static void testLoop3()
	{
		int k = 0;
      	int m = 0;
      	for (int i = 0; i <= 3; i++) {
        	k++;
         	if ( i == 2) {
            i = m ++;
         	}
         	m++;
      	}
      	System.out.println( k + ", " + m );
	}
What will be the output?

Answer:
If you add the folliwing to the if statement:
System.out.println("i == 2, i set to "+i);
And this at the end of the loop block:
System.out.println(i+" "+k + ", " + m );
This will be the output:
0 1, 1
1 2, 2
i == 2, i set to 2
2 3, 4
3 4, 5
4, 5
(Adapted from a question from Four)

Question:
Consider the following code in TestClass.java file:
package p;
private class TC extends java.util.HashMap{
   public TC(){
      super(100);
      System.out.println("TC created");
   }
}
public class TestClass extends TC{
   public TestClass(){
      System.out.println("TestClass created");
   }
   public static void main(String[] args){ new TestClass(); }
}
What will be the output when TestClass is run?

Answer:
The correct answer is that the code will not compile because TC is a top level class and private is not a valid access modifier for a top level class. private can be applied to an inner class.
Error: modifier private not allowed here.
Category: Working with methods - Access Modifiers
(From Four)

Question:
Which of the given class level (nonlocal) variable declarations will not compile.
A. protected int a;
B. transient int b = 3;
C. public static final int c;
D. volatile int d;
E. private synchronized int e;

Answer: 
Can a member variable be declared synchronized? No, because the word synchronized marks method code so that it can't be run by more than one thread at a time.  A synchronized method looks like this:
synchronized (i){
	//do stuff
}
automatic variables can be synchronized as such
synchronized
{
	int i = 1;
	code...
}

Answer:
A, B, C, D will all compile fine.  
Correct response: E.
Category: Java Basics (Epractize)
(From Sample Questions Five)


Question:  What will the output be?
class A {A() {System.out.print("A ");}}
public class Main extends A {
	public static void main(String [] args) {
	new Main(1L).Main();
	}
	public Main(int x) {
		this();
		System.out.print("B ");
	}
	public Main(long x) {
		this((int) x);
		System.out.print("C ");
	}
	public Main() {
		super(); 
		System.out.print("D ");
	}
	void Main() {
		System.out.print("E "); 
	}
}

Answer:
Note: creating a class without a no args constructor causes a COMPILER error when creating the class with a no args constructor.
Correct response: A D B C E
Category: Working with Methods and Encapsulation (Epractize)
(Modified from Sample Questions Five)

Question:
Which of the following are true:

A. A valid override has identical types and order, return type, not less accessable ...
B. The overriding method must not throw any checked exceptions that were not declared for the original method.
C. An overriding method cannot be defined in the same class as the method it overrides; rather, it must be defined in a s
D. Overridden methods are not accessible outside the overriding class.
E. Overridden methods are accessible outside the overriding class.
F. An overriding method can be defined in the same class as the method it overrides.
G. A valid override has identical argument types and order and the return type can be different.

Answer:
Overriding methods completely replace the original method unless the derived class makes specific reference to that original method using the super.xxx() construction.
An overriding method cannot be defined in the same class as the method it overrides (this would be overloading?) rather, it must be defined in a subclass.
The super.xxx() mechanism gives access to an overriden method from within the sublcass that defines the overriding method.
Overridden methods are not accessible outside the overriding class.  Virtual method invocation otherwise insures that the behaviour associated with the object class (not with the variable type) will be the behaviour that occures.
Correct response A, B, C, D.
Category: (EPractize)
(From Sample Questions Five)

Question:
Consider the following classes :
interface I{}
class A implements I{}
class B extends A {}
class C extends B{}
And the following declarations:
A a = new A();
B b = new B(); 
Identify options that will compile and run without error.
1. a = (B)(I)b;
2. b = (B)(I) a;
3. a = (I) b;
4. I i = (C) a;

Answer:
1. class B does implement I because it extends A, which implements I. A reference of type I can be cast to any class at compile time. Since B is-a A, it can be assigned to a. 
2. This will fail at run time because a does not point to an object of class B.
3. An I is not an A. Therefore, it will not compile.
4. It will compile because a C is-a A, which is-a I, and a reference of class A can point to an object of class C. But it will fail at runtime because a does not point to an object of class C.
 Test20.java.  The error for 3 would be:
incompatible types: required A, found I
Interface cast works exactly the same as a class cast and a multiple cast is not much different from a single one. You should break a multiple into two single casts as shown below: 
b = (B)(I) a; 
is same as: 
I temp = (I) a; 
b = (B) temp; 
Now, if you know single casts, there should be no issue with the above.
Option 3 is wrong because you cannot assign any arbitrary I to a variable of type A. 
Class A implements interface I, but there could be other classes, unrelated to A, that also implement I. If option 3 were possible, you could do: 
class D implements I { ... }
D d = new D();
a = (I)d; // This should not work!
(Category: Inheritace.  Source: Sample Questions Three.)
1. a = (B)(I)b;
Type B is upcast to I - Legal as B extends A which implements I 
Type I is downcast to B - Legal as the object in this case is of type B 
Type B is assigned to variable of type A - Legal, you can always assigned an object to a variable which is a super type. ie it is always legal to upcast. 
2. b = (B)(I) a;
Type A is upcast to I - Legal as A implements I 
Type I is downcast to B - Illegal as the object in this case is of type A and can't be downcast to type B 
3. a = (I) b;
Type B is upcast to I - Legal as B extends A which implements I 
Type I is assigned to variable of type A - Illegal, you can't downcast unless you specify the type you are downcasting to. 
4. I i = (C) a;
Type A is downcast to C - Illegal as the object in this case is of type a and can not be downcast to type C. 
.Look's like now my assumption of not looking on the left side of = is false
Correct response: answer 1 is correct.
(From Sample Questions Six)

Question:
1. class Ex6{
2.  public static void main(String args[]){
3.    int x = 0, y=10;          
4.      try{
5.        y /=x; 
6.        }
7.    System.out.print("/ by 0");
8.      catch(Exception e){
9.        System.out.print("error");
10.      }
11.  }  } 

Answer:
What is the result? FIX ANSWER E PROBLEM
 A. 0 
 B. error
 C. Compilation fails 
 D. An uncaught exception is thrown at runtime.  E. No output
You cannot put code in between the try and the catch block, so line 7 causes a compilation error.
Correct response: compiliation error.
(Source: go certify)

Question:
Given

- A and E are classes
- B and D are interfaces

Which are true? (Choose 2)

 A. interface F implements B,D{ }
 B. interface F implements D{ }
 C. interface F extends D{ }
 D. interface F extends E{ }
 E. interface F extends B,D{ }

Answer:
intefaces can only extend other interfaces.
Correct response: E.
(source: go certify)

Question:
Given
1.  class Ex1{
2.    public static void main(String[] args) {
3.    int a[] = { 1,2,053,4};
4.    int b[][] = { {1,2,4} , {2,2,1},{0,43,2}};
5.    System.out.print(a[3]==b[0][2] );
6.    System.out.print(" " + (a[2]==b[2][1]));
7.      }
8.    }
Which is the result?
 A. true false
 B. false false
 C. false true
 D. true true 
 E. Compilation fails

Answer:
We have assinged an octal value to a[2] so the value of the element is 53 in decimal.  ANd we have assigned 43 in decimal to b [2][1].
Correct response: true false.

Question 12:
Consider the following classes:
1.  class Person{
2.  Person(String s,inti ){
3.      ++pid;
4.      name=s;
5.      age=i;
6.      }
7.    static int pid;
8.    int age;
9.    String name;
10.      }
11.  class Test{
12.    public static void main(String args[]){
13.    Person p1 = new Person("John" , 22);
14.    Test te = new Test();
15.    Person p2 = te.change(p1);
16.    System.out.println(p2.pid +" "+p2.name+ " "+p2.age);
17.    System.out.print(p1.pid +" "+p1.name+" "+ p1.age);
18.  }
19.  private Person change(Object o){
20.  Person p2 = (Person)o;
21.  p2.age = 25;
22.  return p2;
23.  }
24.  }
What is the result?

Answer:
Objects are passed by reference, so both p1 and p2 objects are modified at the same time.  And there is no problem in casting at line 20 (actually p1 is a person)
Correct response: 1 John 25, 1 John 25














