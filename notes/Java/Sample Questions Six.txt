Question:
Consider the following classes :
interface I{}
class A implements I{}
class B extends A {}
class C extends B{}
And the following declarations:
A a = new A();
B b = new B(); 
Identify options that will compile and run without error.
1. a = (B)(I)b;
2. b = (B)(I) a;
3. a = (I) b;
4. I i = (C) a;

Answer:
1. class B does implement I because it extends A, which implements I. A reference of type I can be cast to any class at compile time. Since B is-a A, it can be assigned to a. 
2. This will fail at run time because a does not point to an object of class B.
3. An I is not an A. Therefore, it will not compile.
4. It will compile because a C is-a A, which is-a I, and a reference of class A can point to an object of class C. But it will fail at runtime because a does not point to an object of class C.
So answer 1 is correct.
I still don't understand why:
a = (B)(I)b;
will work, but this wont:
a = (I)b;
b is already of type B, so it doesn't need to be cast.  Also, I suppose I didn't know that you cant cast to two different types.  Never seen that before.
So check out Test20.java.  The error for 3 would be:
incompatible types: required A, found I
Interface cast works exactly the same as a class cast and a multiple cast is not much different from a single one. You should break a multiple into two single casts as shown below: 
b = (B)(I) a; 
is same as: 
I temp = (I) a; 
b = (B) temp; 
Now, if you know single casts, there should be no issue with the above.
Option 3 is wrong because you cannot assign any arbitrary I to a variable of type A. 
Class A implements interface I, but there could be other classes, unrelated to A, that also implement I. If option 3 were possible, you could do: 
class D implements I { ... }
D d = new D();
a = (I)d; // This should not work!
(Category: Inheritace.  Source: Sample Questions Three.)
1. a = (B)(I)b;
Type B is upcast to I - Legal as B extends A which implements I 
Type I is downcast to B - Legal as the object in this case is of type B 
Type B is assigned to variable of type A - Legal, you can always assigned an object to a variable which is a super type. ie it is always legal to upcast. 
2. b = (B)(I) a;
Type A is upcast to I - Legal as A implements I 
Type I is downcast to B - Illegal as the object in this case is of type A and can't be downcast to type B 
3. a = (I) b;
Type B is upcast to I - Legal as B extends A which implements I 
Type I is assigned to variable of type A - Illegal, you can't downcast unless you specify the type you are downcasting to. 
4. I i = (C) a;
Type A is downcast to C - Illegal as the object in this case is of type a and can not be downcast to type C. 
.Look's like now my assumption of not looking on the left side of = is false

Question:
int x = 2;  
int y = 3;  
x += y += x += y;  
What will x and y become?

Answer:
1 += y += x += y; // evaluate x  
1 += 1 += x += y; // evaluate y  
1 += 1 += 1 += y; // evaluate x which is 1 as no addition takes place yet  
1 += 1 += 1 += 1; // evaluate y  
1 += 1 += 2;      // x is now 2  
1 += 3;           // y is now 3  
4;                // x is now 4 
So the final result is 

Questions A - I:

		int x = 5;
		int y = 6;
		x += y += x += y;  
		System.out.println("A. x = "+x+" y = "+y);

		y = 7;
		y = ++y +y++; 
		System.out.println("B. y = "+y);

		y = 8;
		y = y + ++y +y++;
		System.out.println("C. y = "+y);

		y = 9;
		y = y + (++y + y++); 
		System.out.println("D. y = "+y);

		y = 10;		
		y = y++ + (y + y++); 
		System.out.println("E. y++ + (y + y++) is "+y);

		x = 11;  
		int z = ++x * x * x--;
		System.out.println("F. ++x * x * x-- is "+y);

		int a = 1;
		int b = 1;
		int c = 1;
		int d = 1;
		int i = 10;
		a = (b = i++) + (c = ++i) + (d = i--); 
		//    10			12			12
		System.out.println("G. a = "+a+" b = "+b+" "+c+" c "+" i "+i);

		x = 2;
    	z = ++x * x--;
    	System.out.println("H. z = ++x * x-- is x = "+x+" y = "+y+" z = "+z);

		x = 4;
		z = x++ * --x;
		System.out.println("I. x++ * --x is "+z);

		x = 1;
		z = ++x + ++x + ++x;
		System.out.println("J. ++x + ++x + ++x is "+z);

		x = 1;
		z = x++ + x++ + x++;
		System.out.println("K. x++ + x++ + x++ is "+z);


Answers:
A. x = 22 y = 17
B. y = 16
C. y = 26
D. y = 29
E. y = 32
F. x = 1728
G. a = 34 b = 10 c = 12 d = 12 i = 11
H. x = 2 y = 32 z = 9
I. x = 16
J. 9
K. 6

Question:
	private static void testNan()
	{
		Double d1 = new Double(-1.0/0.0);
		Double d2 = new Double(0.0/0.0); 
     	System.out.println("A. "+(d1 + " = " + d1.isNaN()));
     	System.out.println("B. "+(d2 + " = " + d2.isNaN())); 
		Byte b1 = 1;
		byte b2 = 1;
		System.out.println("C. "+(b1==b2)); 
		double num1 = 0.2;
		float num2 = 0.2f;
		System.out.println("D. "+(num1+" == "+num2));
		System.out.println("E. "+(num1 == num2)); 
		System.out.println("F. "+(num1 == (double)num2)); 
		System.out.println("G. "+((float)num1 == num2)); 
		num1 = 0.5;
		num2 = 0.5f;
		System.out.println("H. "+(num1+" == "+num2));
		System.out.println("I. "+(num1 == num2)); 
		System.out.println("J. "+(num1 == (double)num2)); 
		System.out.println("K. "+((float)num1 == num2)); 
	}

Answer:
A. -Infinity = false
B. Nan = true
C. true
D 0.2 == 0.2
E. false
F. false
G. true
H. 05. == 0.5
I. true
J. true
K. true

Question:
class Parent
{
	private void method1(){System.out.println("Parent1");}
	public void method2(){System.out.println("Parent2"); method1();}
}
class Child extends Parent
{
	public void method1()
	{System.out.println("Child1");}
	 public static void main(String args[])
	 {Parent p = new Child();p.method2();}
}

Answer:
Output: 
Parent2
Parent1
If method1 in parent were not private, the output would be:
Parent2
Child1
super.arentMethod() calls the parent method.

Question: if A extends B,
A a = new A();
B b = new B(); 
which are legal?
b=a 	
b=(A)a; 
a=b;
a=(A)b;
a=(B)b;

Answer: 
The first two are not legal.


Question:
What will the following code do when compiled and run?
public class TestInterface
{
	public abstract class InnerTest
	{
		abstract void f();
	}
	public static void main(String[] args) {
		TestInterface t = new TestInterface();
		TestInterface.InnerTest test = t.new InnerTest()
		{
			public void f() 
			{ 
				System.out.println("Inner f");
			}
		};
		test.f(); 
	}
}

Answer:
Compiles fine.


Question:
Consider that str is a variable of class java.lang.String. Which of the following lines of code may throw a NullPointerException in certain situations?  Or a tougher version of the question could be : Which of the following lines of code are not an example of robust design ?
1. if ( (str != null) | ( i == str.length() ) ) 
2. if ( (str == null) | ( i == str.length() ) ) 
3. if ( (str != null) || (i == str.length() ) )
4. if ( (str == null) || (i == str.length() ) )

Answer:
(See TestClass22)
1. (i == str.length()) will always be executed so if 'str' is null, then str.length() will throw a NullPointerException.
2. (i == str.length()) will always be executed so if 'str' is null, then str.length() will throw a NullPointerException.
3. (i == str.length()) will only be evaluated if (str != null) is false, and (str != null) will be false if 'str' is null. So it will also throw a NullPointerException.
4. (i == str.length()) will only be evaluated if (str == null) is false, and (str == null) will be false if 'str' is NOT null. So it will NEVER throw a NullPointerException.
The correct answers are 1,2 and 3.
(From Sample Questions Three)

Question:  What will be the output of the following method:
	public static void testLessThanOrEqualTo()
	{
		int num;
		for (num = 0; num <= 10; num++)
		{
			System.out.println("num "+num);
		}
		System.out.println("num at end of loop "+num);
	}

Answer:
The number will be incremented and tested one more time when the value of num is 10, which means that num will be at 11 and the loop test will return false, and the loop will end.  So the output is:
1
2
..
10
num at end of loop 11


