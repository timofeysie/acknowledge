#Table of Contents#
Quotes  
Hash Codes
To Do  
Terms  
Pass by Value Discussion  
Unicode  
Parsing Wikitionary  
xAPI Notes  
Happiness  
Settings File  


#Introduction#
These are random notes as we get ready for the Programmer Level I Exam (associated with the "Oracle Certified Associate, Java SE 7 Programmer"), as well as getting to know generics for the Level II Exam, along with learning Groovy and some Scala, and the beginnings of Java 8.

#Quotes#
"an anonymous class seems a bit excessive and cumbersome."  (From 'Learning the Java Language' Trail)
So Java 8 contains closures as well.  The above is admiting that Java has been excessive and cumbersome for the past 20 years.  But maybe there is hope.  It would be nice if the docs admitted their inspiration.
They could say, "Thanks to efforts by the creators of Groovy, Scala and Clojur to simplify the Java language.  We have answered their calls after 10 years on JCP and introduced functions like lambda expressions (closures)."  They could even qualify this with "After all, they are riding on our coat-tails/bytcode platform".

Groovy: this.args.each{ arg -> println "hello, ${arg}"}
Java 8: p -> p.getGender() == Person.Sex.MALE

Is programming finally being liberated from the von Neuman Style?
After reading some comments from the developers release page of Java 8, it seems at least one developer our of the 8 million isn't so happy about Lambda's:
"I uderstand the value of Lambdas but I'd prefer a slightly more verbose syntax if only it looked more 'Javaish' and easier to read... Perl as a culture favors tersness over readability.  This is evident in their syntax and total lack of comments in most public projects."
Well, like Democratic politics, that's what happens when you try to please everyone; no one likes it.

- RESTful - REpresentational State Transfer API.
- The weight between demand and sharing.
- Two sandwiches short of a picnic.

- a sentence, as part of a conversation, has words in it which are learning objects that can either pass or fail upon different aspects, such as speaking (pronunciation) or listening, or writing (mispelling) or reading.  Listening and reading could be more problematic, because we dont know if the person missted the point of the sentence because of a certain unknown word, or a combination of words/grammer.  The same with listening.

- Clojure is designed around a few core engineering principles, such as Software Transactional Memory
-  imperative language

- Scratch 
Catastrophic Backtracking.
I need to be sheilded from your sheilding.

###Hash Codes###

The so-called "hashing algorithm" implemented by class Test1 will always retrn the same value, 42, which is legal but will place all of the hash table entries into a single bucket, the most inefficient setup possible.
A **hash function** is any algorithm that maps data of arbitrary length to data of a fixed length. The values returned by a hash function are called hash values, hash codes, hash sums, checksums or simply hashes. 
- every class implicitly or explicitly provides a hashCode() method, which digests the data stored in an instance of the class into a single hash value (a 32-bit signed integer). This hash is used by other code when storing or manipulating the instance – the values are intended to be evenly distributed for varied inputs in order to use in clustering. This property is important to the performance of hash tables and other data structures that store objects in groups ("buckets") based on their computed hash values. Technically, in Java, hashCode() by default is a native method, meaning, it has the modifier 'native', as it is implemented directly in the native code in the JVM.
- a hash table (also hash map) is a data structure used to implement an associative array, a structure that can map keys to values. A hash table uses a hash function to compute an index into an array of buckets or slots, from which the correct value can be found.


#Collections#
- Hashtable:  We have used this class extensively in the past, since we started learning Java 1.2.  In a professional environment, this is not acceptable.  We need to know all the types intimately so that the best solution can be used in the right place.  We read this last night when we started to fall back on the old hashtable: "Hashtable is a legacy collection which was replaced by Java 1.2 collections in 1998. I suggest you avoid it, along with Vector and Enumeration." (Peter Lawrey reputation 207k)
- Needed a reverse/backwards enumeration, it seems there isn't one.
- List Iterator one of the sub interface can traverse backwards also which enumeration can’t do.
- Iterator has a remove() method while Enumeration doesn’t. 
- Enumeration acts as Read-only interface, because it has the methods only to traverse and fetch the objects, where as using Iterator we can manipulate the objects also like adding and removing the objects.


#To do#
-  The toString() method provides a canonical representation of a BigDecimal.
- @SuppressWarnings("unchecked") add to catechis
- GenericAlgorithm
..cannot be applied to given type;
required T[],T
found: Integer[],Integer
reason: inferred type does not conform to declared bound(s)
inferred: Integer
 bound(s): Comparable<Integer>
 where T is a type-variable
http://docs.oracle.com/javase/tutorial/java/generics/methods.html
print table from
C:\Documents and Settings\Administrator\My Documents\Downloads\groovy\core\overriding\Overriding and Hiding Methods (The Java™ Tutorials   Learning the Java Language   Interfaces and Inheritance).htm
- Got this error running AllTests:
Failed to create Script instance for class: MultiplierTest.  Reason: java.lang.InstantiationException:  MultiplierTest.
But if we run MultiplierTest by itself, there is no output at all.



#Terms#
- corollary: as a result
1.Mathematics . a proposition that is incidentally proved in proving another proposition.
2.an immediate consequence or easily drawn conclusion.
3.a natural consequence or result
- "As a corollary of computing the exact result, the rounding mode setting of a MathContext object with a precision setting of 0 is not used and thus irrelevant."

- lexicographic or lexicographical order (also known as lexical order, dictionary order, alphabetical order or lexicographic(al) product)

- a Cartesian product is a mathematical operation which returns a set (or product set) from multiple sets. That is, for sets A and B, the Cartesian product A × B is the set of all ordered pairs (a, b) where a ∈ A and b ∈ B.

- A red–black tree is a data structure which is a type of self-balancing binary search tree.  A TreeSet stores its elements in a red-black tree.  Invented in 1972 by Rudolf Bayer and named "symmetric binary B-tree," acquired its modern name in a paper in 1978 by Leonidas J. Guibas and Robert Sedgewick entitled "A Dichromatic Framework for Balanced Trees".

- Constructor class provides information about, and access to, a single constructor for a class.  Constructor permits widening conversions to occur when matching the actual parameters to newInstance() with the underlying constructor's formal parameters, but throws an IllegalArgumentException if a narrowing conversion would occur.


#Pass by Value Discussion#
It's amazing how I have been using Java for over ten years but didn't understand some very fundamental things about it.  For one that it's a pass-by-value language.  The answer to my question posed a few months ago about what I called a live variable, is that the reference to the ArrayList is what is passed to the method, so that any changes to the list will persist becaucse the reference from the calling method is the same reference.  So then you might think that Java is actually a pass-by-reference languae.  And many people would argue about that, like they did here: 
http://stackoverflow.com/questions/40480/is-java-pass-by-reference
It's a greate discussion.  Noticing the aversion for the word pointer.  Then someone pointing out (pun intended) that the main error we get is called a NullPointerException.  My take is that Java is a pass-by-address(or primitive) language, but Ganash pointed out that this is the definition of a reference, so maybe I still can't explain this clearly even after reading all the answers on that page.  Althought Ganash's answer didn't get much support... 
A primitive passed into a method will not persist any changes that happen to it in the method.  Also, a String that is immutable will not change, but a StringBuffer will, as pointed out by Kukudas.
What is amazing about that link above is this: asked 5 years ago, viewed
314888 times, active 5 days ago.
To think of all the times I returned objects from a method when the simple fact is I didn't need to.  Or when I created a vector of objects to return because only one object can be returned from a method when actually I didn't need to.  Even if the method is in a different class!  See the class ByValue.java in the java directory for proof of this.
Some good quotes from the discussion link above:

If a Java object "behaves" like it is being passed by reference, that is a property of mutability and has absolutely nothing to do with passing mechanisms.  I am not sure why this is so confusing, perhaps because so many Java "programmers" are not formally trained, and thus do not understand what is really going on in memory?  by Rusty Shackleford

Some might say the "value" of the address, and some say it's just a reference to the object. This is the genesis of the holy war between "reference" and "value" proponents... C++ programmers would call this a pointer, but some Java developers are racist against the word "pointer". Whatever. Just know that the address of the object goes in the stack.  by cutmancometh

- Groovy failure in MultpilierTest
2 
http://groovy.codehaus.org/Advanced+OO
http://groovy.codehaus.org/Groovy+way+to+implement+interfaces
...
http://docs.oracle.com/javase/tutorial/java/javaOO/nested.html
http://www.tutorialspoint.com/java/





#Unicode#

\p{prop} specifies a unicode block
\p{InMongolian}  for the Mongolian language.

The supported categories are those of The Unicode Standard in the version specified by the Character class. 
http://www.unicode.org/unicode/standard/standard.html
The category names are those defined in the Standard, both normative and informative. The block names supported by Pattern are the valid block names accepted and defined by UnicodeBlock.forName.



#Parsing Wikitionary#

korean_wiki = http://ko.wiktionary.org/wiki/
english_wkik = http://en.wiktionary.org/wiki/

Seach wiki for word
found no.  Page contains: 
<div id="mw-content-text"><div class="noarticletext">
mark text as unverified.
found yes, mark as text verified.
find word tyoe
seach for definition.
found/not found as above
search for other definitions and create associations/



#xAPI Notes#

Activity: An Activity is a type of Object making up the “this” in I did “this”; it is something with which an Actor interacted. It can be a unit of instruction
THe first output from our TinCanJava test:

"object": {"id": "http://en.wiktionary.org/wiki/cat","objectType": "Activity","definition": {"name": {"ko-KR": "고양이"},"description": "Reading","type": "http://ko.wiktionary.org/wiki/고양이"}}
---
Statement(
    id=a5e60983-8a08-4d8e-98d1-bae66946eb2b, 
    stored=2014-01-26T18:05:38.343+09:00, 
    authority=Agent(
        objectType=Agent, 
        name=TestName, 
        mbox=timofeyc@test.com, 
        mboxSHA1Sum=null, 
        openID=null, 
        account=null), 
    version=null, 
    voided=null)



#Happiness#
- to do
- manage happiness folders.
- put number of happy and sad images created in creation studio.
- display name in studio.

#settings file#
- selection mode: singleexclusive or double/non-exclusive
- definitions happyness = ?  sadness = ?
- instructions for first screen. 
- default settings: selection_mode=exclusive, into_title=Choose Happiness, into_positive_text=Try to choose happy images to continue.  intro_negative_text=Avoid choosing sad images. final_title=Summary  final_positive_text=Amount of happiness, final_negative_text=Amount of sadness.

- show instructions from folder-settings before each exercise.
- statistics tracking: send to e-mail.
- statistics: happy presses, sad presses. sad presses could g

Features  
- webiste for upload and download of happiesive you compassion points.  package folder into a zip utility for up/download
- when sadness has a reason.
- art therapy or measure/check youre happiness/mood/feelings
- plan your happiness.

What is Happiness?
- hap is the root of the word and means good fortune.

#When sadness has a reason#
- sadness/trauma can make you stronger.  appreciate youre life as it is.  people are the better for their sadness, for coming out the end/survivor.  stronger, wiser and more compassionate for coming thru the sadness.  A challenge that leads to growth.  Going thru turmoil with someone lets you know how compatible they are with you.
- happy about going somewhere
- people in hosptal are sad, but they have a reason to be sad.
- upward or downward comparrisons.  When you are the only person with something, you are happy.  but when everyone has it, then you don't feel happy anymor (ex: refridgerators)
- happy days, hollidays as happy picutres.  working weekdays as sad.  No, because you can be happy at work, and sad on hollidays due to the orgy of meterialism.  the hedonic treadmill.  companies convincing ppl what they've got isn;t good enough.  You are what you own.  Who you are is what you own.
- useless purchases that eventually get thrown away.
- religeron and community and happiness.  images of god & the devil
- what about settings so that people can choose both images, and that says something about their mood.  How many sad choices vs happy ones.
For this we need a settings file in each user created folder 
- disorganized things vs organized things.
- cold vs. warm
- ego vs. selflessness.
- homeless vs. warm homes
- wrapped gifts vs. ? opened gifts?  
- toys in their package vs. toys out of their packages.
- group of people vs. single people (non-exclusive)
- mental patients vs healthy minds (is is wrong to avoid mental health?)
- face mash.  what was the formula?
- the dali lama has a book on happiness
- affection humility, compassion.
- blank faces. non-exclusive
- professions.  non-exclusive.  can lead to an idication of what job would be good for someone.

Agile: a set of values and principles made by leading figures in 2001.  
Scrum: a concrete software development methodology (1995) by two signatories of Agile Manifesto. Scrum supports Agile values.
“waterfall model” define, plan, organise, execute and then close. (one stage follows another) which started to leak. Obviously, in actual practise, the estimates and other plans have to be tweaked right through the execution phase which gave birth to a string of complex yet not very meaningful methods as Earned Value Management.
The fundamental principles to tackle product development complexity:
- The project is organised as a number of small iterations through the classic project stages (definition, planning, organisation, execution and closure).
- Each iteration aims at a relatively small yet semantically complete increment in product functionality or non-functional characteristics.
- Strong end-user involvement throughout the project.



Building: Ant, Maven, Continuum, Jelly, Ivy, Gradle, Jenkins
Code repo: SVN, CVS, Git, ....
Continuous Integration: Hudsonx2, Cruise Control, Luntbuild, Bamboox2, TeamCityx2
Testing: Junit, easymock (+ PowerMock), XmlUnit, HtmlUnit, Mockitox2, JMock
Reporting/Static Analysis: Coberturax2, Emmax2, FindBugsx2, JavaDoc, Checkstyle, PMD, Clover
Project management: XPlanner, GreenHopper, JIRA, ....
Documentation: Confluencex2, XWikix2, JavaDoc
Code Review: Review Board, Crucible (+ Fisheye), SmartBear
QA Dashboard: Sonar
Estimation Tool: Planning Poker

Mylen Mylyn: task and application life cycle management (ALM) for eclipse.
Greenhopper (Jira plugin)
P4
Yoxel PCM

Build Automation Tools
- Maven
- Apache Continuum, a continuous integration server which integrates tightly with Maven
- Apache Jelly, a tool for turning XML into executable code
- Apache Ivy, alternative dependency management tool for Java
- Gradle, a build tool based on convention over configuration
- Jenkins

Testing
http://www.javaranch.com/unit-testing.jsp

Unit Test: The smallest amount of testable code. Often a single method/function, sans the use of other methods or classes. Fast! Thousands of unit tests can run in ten seconds or less! A unit test NEVER uses:
a database
an app server (or server of any kind)
file/network I/O or file system;
another application;
the console (System.out, System.err, etc.)
logging
most other classes (exceptions include DTO's, String, Integer, mocks and maybe a few others).
Unit tests are almost always part of a regression suite.

Regression Suite: A collection of tests that can be run all at once. An example would be that all tests put in a certain directory would all be run by JUnit. A developer could run a unit test regression suite 20 times per day. Or, they might run a functional test regression suite twice a month.

Functional Test: Bigger than a unit and smaller than a full component test. Usually exercising several methods/functions/classes working together. Permitted to take its sweet time: hundreds of tests could take hours to run. Most functional tests are part of a functional test regression suite. Usually run from JUnit.

Integration Test: Testing two or more components working together. Sometimes part of a regression suite.

Component Test: Running one component by itself. Frequently done by QA, managers, XP customers, etc. This sort of test is not part of a regression suite and it is not run by JUnit.

Component Acceptance Test (C.A.T.): A component test run in front of a crowd of people as part of a formal process. The people in the room collectively decide if the component has met required criteria.

System Test: All components being run together.

System Acceptance Test (S.A.T.): A system test run in front of a crowd of people as part of a formal process. The people in the room collectively decide if the system has met required criteria.

Stress Tests: Another program loads a component, some components, or possibly the entire system. I have seen some small stress tests worked into some regression functional tests - a pretty smart way to test some concurrency code!

Mock: A brain dead piece of code used in unit and functional tests to make sure that a piece of code you are attempting to test does not use some other bit of production code. A Mock class typically overrides all of the public methods in a production class and is inserted somewhere that might try to use the production class. Sometimes a Mock class implements an interface and replaces production code that implements the same interface.

Shunt: Kinda like a mock class that extends production code, only the purpose is NOT to override ALL of the methods, but just enough so you can exercise some production methods, while mocking the rest of the production methods. Especially useful if you want to test a class that might try to use I/O. Your shunt can override the I/O methods while testing the non I/O methods.
